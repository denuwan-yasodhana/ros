#! /usr/bin/env python

import rospy
import time						                                                                    //  Import the standard Python time package, use for the timer functionality of our server.
import actionlib						                                                              //  Import the ROS actionlib package that provides the SimpleActionServer class
from basics.msg import TimerAction, TimerGoal, TimerResult	                              //  Import some of the message classes that were autogenerated from our Timer.action file


def do_timer(goal):								                                                        // "goal" argument that is passed to do_timer() is TimerGoal, which corresponds to the goal part of Timer.action
	start_time = time.time()						                                                    // Current time
	time.sleep(goal.time_to_wait.to_sec())					                                        // Sleep for the time requested in the goal & converting duration to seconds
	
	result = TimerResult()						                                                      //   Result part of Timer.action
	result.time_elapsed = rospy.Duration.from_sec(time.time() - start_time)	                // Subtracting start time from the current time & converting seconds to duration
	result.updates_sent = 0						                                                      //  Didnâ€™t send any updates
        server.set_succeeded(result)                                                            //  Successfully achieved the goal and passing it the result
  
	/*-------------------------------------
		// Adittional
		server.set_aborted(result, "Timer aborted due to too-long wait")	//  This call sends a message to the client notifying it that the goal has been aborted.
	
		if server.is_preempt_requested():				//  This function will return True if the client has requested that we stop pursuing the goal (this could also happen if a second client sends us a new goal). 
			return	
		
		server.set_preempted(result, "Timer preempted")		//  This call sends a message to the client notifying it that the goal has been preempted

		feedback = TimerFeedback()							//  Send feedback, using the type TimerFeedback, which corresponds to the feedback part of Timer.action
		feedback.time_elapsed = rospy.Duration.from_sec(time.time() - start_time)		
		feedback.time_remaining = goal.time_to_wait - feedback.time_elapsed
		server.publish_feedback(feedback)

	---------------------------------------*/
						                                                  
rospy.init_node("Action_Server")
server = actionlib.SimpleActionServer('timer', TimerAction, do_timer, False)		          //  Create SimpleActionServer ( server's name, type of the action that the server will be handling, goal callback/ function, pass "False" to disable autostarting the server )    ...... Autostarting should always be disabled on action servers, because it can allow a race condition that leads to puzzling bugs.
server.start()								                                                            //  Server start
rospy.spin()								                                                              //   to wait for goals to arrive
                                                                                                                         

Action_file.action
                                                                                                                         
duration time_to_wait	//  Goal
---
duration time_elapsed	//  Result
uint32 updates_sent
---
duration time_elapsed	//  Feedback
duration time_remaining

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                         
                                                                                                                         
                                                                                                                         
